#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'wiringpi2'
require 'pp'
require 'rest-client'
require 'radiodan'

$:<< './lib'
require 'local_config'
#require 'radiodan/lib/em_additions'

class Button

  INPUT = 0
  INT_EDGE_RISING = 1
  INT_EDGE_FALLING = 2
  INT_EDGE_BOTH = 3
  PUD_UP = 2
  attr_accessor :pins, :value1, :value2, :value3

  def initialize(pins, io)
    puts "init #{pins}"
    self.pins = pins
    self.pins.each do |pin|
      puts "pin is #{pin}"
      io.pin_mode(pin,INPUT)
      io.pullUpDnControl(pin, PUD_UP)
      io.wiringpi_isr(pin, INT_EDGE_BOTH, update(io))
      puts "ok"
    end
  end

  def update(io)
    self.value1 = io.digital_read(pins[0])
    self.value2 = io.digital_read(pins[1])
    self.value3 = io.digital_read(pins[2])

    return nil
  end

end


# http://www.adafruit.com/blog/2013/02/01/raspberry-pi-gpio-resource-piday-raspberrypi-raspberry_pi/
pin1 = 0
pin2 = 2
pin3 = 3
pins = [pin1, pin2, pin3]
io = WiringPi::GPIO.new
button = Button.new(pins,io)
last_val1 = nil
last_val2 = nil
last_val3 = nil

EM.run {
  EM.add_periodic_timer(0.1) do
#  EM.now_and_every(0.2) do
    button.update(io)
    if(button.value1!=last_val1)
      puts button.value1
      last_val1 = button.value1
      if(button.value1==0)
           puts "RANDOM CHANNEL!"
           config = LocalConfig.new
           url = config.url_local.url
           puts "#{url}try"
           #sleep 1
           begin
             req = RestClient.get("#{url}try", :a => "b")
             pp req
           rescue Exception=>e
             pp e
           end
#           sleep 2 #firing multiple times
      end
    end

    if(button.value2!=last_val2)
      puts button.value2
      last_val2 = button.value2
      if(button.value2==0)
           puts "VOTE DOWN CHANNEL!"
           config = LocalConfig.new
           url = config.url_local.url
           puts "#{url}down"
#           sleep 1
           begin
             req = RestClient.get("#{url}down", :a => "b")
             pp req
           rescue Exception=>e
             pp e
           end
           sleep 2 #firing multiple times
      end
    end


    if(button.value3!=last_val3)
      puts button.value3
      last_val3 = button.value3
      if(button.value3==0)
           puts "VOTE UP CHANNEL!"
           config = LocalConfig.new
           url = config.url_local.url
           puts "#{url}up"
           #sleep 1
           begin
             req = RestClient.get("#{url}up", :a => "b")
             pp req
           rescue Exception=>e
             pp e
           end
           sleep 2 #firing multiple times
      end
    end

  end
}
