#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'radiodan'
require 'sinatra/async'
require 'thin'
require 'pp'

$:<< './lib'
require "radiodan/playlist"
require 'random_channel'
require 'best_new_channel'
#require 'web_server'
require 'xml_web_api'

require 'local_config'
require "rest-client"

root = File.join(File.dirname(__FILE__), '..')

vol = 90

# download the list of files

channels = []

if(File.exists?(File.join(root, 'items')))
  puts "Got a starting file"

  items = File.readlines(File.join(root, 'items'))
  items.each do |item|
     channels.push(item.split(" ")[0])
  end
  url = channels.sample

else
  puts "No starting file - downloading one"

  config = LocalConfig.new
  url = config.url_base.url
  req = RestClient.get("#{url}/download")

  to_download = {}
  req.body.split("\n").each do |line|
    line = line.chomp
    arr = line.split(" ")
    to_download[arr[0]]=arr[1] 
  end

  pp to_download

  items_string = ""

# download the files themselves
# hardcoded location 'podcasts' must match mpd's config /etc/mpd.conf (see Vagrantfile)

  to_download.each do |file_name, file|
    begin
      req = RestClient.get(file)
      File.open(File.join('podcasts', file_name ), 'wb') {|f| f.write(req.body) }
      channels.push(file_name)
      items_string << file_name
      items_string << "\n"
      sleep 1
    rescue Exception=>e
      pp e
      puts "failed for file #{file}"
    end
  end

  File.open(File.join(root, 'items'), 'w') {|f| f.write(items_string) }

end

metadata = {}

f = File.readlines("items_metadata")

f.each do |line|
  arr = line.split(" ")
  file = arr[0]
  channel = arr[1]
  title = arr.slice(2,arr.length).join(" ").chomp
  c = channel.gsub("_", " ")
  metadata[file]={"title"=>title, "channel"=>c}
  sleep 1
end


cc = channels.sample
the_title = metadata[cc]["title"]
the_channel = metadata[cc]["channel"]

my_name = File.read("/etc/hostname").chomp

a = Radiodan::Playlist.new( tracks: ("#{my_name}.wav"), volume: 100)
b = Radiodan::Playlist.new( tracks: ("intro.wav"), volume: 100)
c = Radiodan::Playlist.new( tracks: ("#{cc}_channel.wav"), volume: 100)
d = Radiodan::Playlist.new( tracks: (cc), volume: vol)

channel = Radiodan::Playlist.new( tracks: (a.tracks + b.tracks + c.tracks + d.tracks))

#channel = Radiodan::Playlist.new tracks: channels.sample, volume: vol

EM.synchrony do

  radio = Radiodan.new do |builder|
    builder.log      STDOUT
    builder.adapter  :MPD, :host => 'localhost', :port => 6600
    builder.playlist channel
    builder.use      :random_channel, :filename => "#{root}/items"
    builder.use      :best_new_channel, :filename => "#{root}/items"
  end

#  Thin::Server.start WebServer.new(radio.player,root), '0.0.0.0', 3000, :signals => false
  Thin::Server.start XMLWebAPI.new(radio.player,root), '0.0.0.0', 80, :signals => false
  radio.start

end
